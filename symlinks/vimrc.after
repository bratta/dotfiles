syntax enable
let g:solarized_termtrans = 1
let g:solarized_visibility = "low"
set background=dark
colorscheme solarized
highlight clear SignColumn

set autoread

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=red

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_post_private = 1

let g:turbux_command_prefix = 'spring'
let g:tslime = {'window': '2', 'pane': '0', 'session': 'protrax'}

set wildmode=longest,list,full
set wildmenu

" Rename files with :Rename[!] newfile.txt
command! -nargs=* -complete=file -bang Rename :call Rename("<args>", "<bang>")
function! Rename(name, bang)
	let l:curfile = expand("%:p")
	let v:errmsg = ""
	silent! exe "saveas" . a:bang . " " . a:name
	if v:errmsg =~# '^$\|^E329'
		if expand("%:p") !=# l:curfile && filewritable(expand("%:p"))
			silent exe "bwipe! " . l:curfile
			if delete(l:curfile)
				echoerr "Could not delete " . l:curfile
			endif
		endif
	else
		echoerr v:errmsg
	endif
endfunction

function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

set backupskip=/tmp/*,/private/tmp/*

if has('gui')
  set guioptions-=e
endif
if exists("+showtabline")
  function MyTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let s .= i . ':'
      let s .= winnr . '/' . tabpagewinnr(i,'$')
      let s .= ' %*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= file
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=2
  set tabline=%!MyTabLine()
  map    <C-Tab>    :tabnext<CR>
  imap   <C-Tab>    <C-O>:tabnext<CR>
  map    <C-S-Tab>  :tabprev<CR>
  imap   <C-S-Tab>  <C-O>:tabprev<CR>
endif

imap jj <Esc>

nmap <Up> <C-w>-
nmap <Down> <C-w>+
nmap <Left> <C-w><
nmap <Right> <C-w>>

au BufRead,BufNewFile *.hamlc set ft=haml
au BufRead,BufNewFile *.axlsx set ft=ruby
set wildmode=longest,list,full
set wildmenu

let g:startify_custom_header = [
  \ '                                                                                                                   ',
  \ '  _ _   _     _               _ _                             _            __  _        __      _ _           _ _  ',
  \ ' ( | ) | |_  (_)  _ __ ___   ( | )       __ _   ___   _   _  | |__        / / | |_     / /     ( | ) __   __ ( | ) ',
  \ '  V V  | __| | | | ''_ ` _ \   V V       / _` | / __| | | | | | ''_ \      / /  | __|   / /       V V  \ \ / /  V V  ',
  \ '       | |_  | | | | | | | |        _  | (_| | \__ \ | |_| | | |_) |    / /   | |_   / /    _         \ V /        ',
  \ '        \__| |_| |_| |_| |_|       (_)  \__, | |___/  \__,_| |_.__/    /_/     \__| /_/    ( )         \_/         ',
  \ '                                        |___/                                              |/                      ',
  \ '',
  \ '',
  \ ]
let g:startify_bookmarks = [ '~/.vimrc.after' ]
let g:startify_change_to_vcs_root = 1
autocmd FileType startify setlocal buftype=

" CtrlP Customizations
" Map C-\ to buffer search
if has("gui_macvim") && has("gui_running")
  call janus#add_mapping('ctrlp', 'map', '<D-\>', ':CtrlPBuffer<CR>')
  call janus#add_mapping('ctrlp', 'imap', '<D-\>', '<ESC>:CtrlPBuffer<CR>')
else
  call janus#add_mapping('ctrlp', 'map', '<C-\>', ':CtrlPBuffer<CR>')
  call janus#add_mapping('ctrlp', 'imap', '<C-\>', '<ESC>:CtrlPBuffer<CR>')
endif

" Moving lines customizations
" Normal mode
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==

" Insert mode
inoremap <C-j> <ESC>:m .+1<CR>==gi
inoremap <C-k> <ESC>:m .-2<CR>==gi

" Visual mode
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_autosave_periodic = 5

let g:typescript_indent_disable = 1
